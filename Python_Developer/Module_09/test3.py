# Иногда нам нужны простые одноразовые функции, для которых def - слишком жирно.
# Для этого есть lambda.

############################
# пример 1 - lambda-функции
############################

my_func = lambda x: x + 10

print(my_func(42))
print(type(my_func))
print(my_func.__name__)

# введем lambda в функцию высшего порядка:
my_numbers = [3, 1, 4, 1, 5, 9, 2, 6]

result = map(lambda x: x + 10, my_numbers)
print(list(result))

######################################################################################
# пример 2 - lambda-функция может принимать как несколько параметров, так и ни одного:
######################################################################################

# my_numbers - уже есть
they_numbers = [2, 7, 1, 8, 2, 8, 1, 8]

result = map(lambda x, y: x + y, my_numbers, they_numbers)
print(list(result))

# у лямбда-функции ограниченное применение.
# - Они создаются в процессе выполнения кода и из-за этого могут просадить быстродействия.
# - Они плохо сериализируются - могут быть проблемы в крупных фреймворках.
# - Не надо пытаться записать сложное выражение в лямбда-функцию: если там более 3-5 операторов - пора сделать «def».
#  (сериализация — это процесс перевода структуры данных в битовую последовательность)
