# Домашняя работа по уроку "Цикл for. Элементы списка. Полезные функции в цикле"
#
# Задача "Всё не так уж просто":
# Дан список чисел numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# Используя этот список составьте второй список primes содержащий только простые числа.
# А так же третий список not_primes, содержащий все не простые числа.
# Выведите списки primes и not_primes на экран(в консоль).
# Пункты задачи:
# Создайте пустые списки primes и not_primes.
# При помощи цикла for переберите список numbers.
# Напишите ещё один цикл for (вложенный), где будут подбираться делители для числа из 1ого цикла.
# Отметить простоту числа можно переменной is_prime, записав в неё значение True перед проверкой.
# В процессе проверки на простоту записывайте числа из списка numbers в списки primes и not_primes
# в зависимости от значения переменной is_prime после проверки (True - в prime, False - в not_prime).
# Выведите списки primes и not_primes на экран(в консоль).
#
# Пример результата выполнения программы:
# Исходный код:
#  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# Вывод на консоль:
# Primes: [2, 3, 5, 7, 11, 13]
# Not Primes: [4, 6, 8, 9, 10, 12, 14, 15]
# Примечания:
# Учтите, что число 1 не является ни простым, ни составным числом, поэтому оно отсутствует в конечных списках.
# Для проверки на простоту числа вам нужно убедиться, что выбранное число не делиться ни на что
# в диапазоне от 2 до этого числа(не включительно).
# Попробуйте оптимизировать(ускорить) процесс выяснения простоты числа при помощи оператора break,
# когда найдёте делитель. (Не обязательно)
# Переменные меняющее своё булевое состояние на противоположное в процессе проверки, как is_prime,
# в кругах разработчиков называются переменными-флагами(flag).

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]  # заданный список
primes = []  # список простых чисел
not_primes = []  # список составных чисел

for i in numbers:
    is_prime = True
    if i == 0:  # если это 0 - сразу отбрасываем
        continue
    if i == 1:  # 1 тоже ни простое, ни составное. Отбрасываем
        continue
    if i == 2 or i == 3:  # 2 и 3 проверки не требуют. Добавляем сразу
        primes.append(i)
        continue
    for j in range(int(i / 2)):  # если j > i/2, то проверка - трата времени
        if j == 0:  # на ноль делить нельзя, будет ошибка
            continue
        if j == 1 or j == i:  # любое число делится на единицу и на себя. Проверять незачем.
            continue
        if i % j == 0:  # если число делится без остатка - оно составное
            is_prime = False  # меняем флаг
            break
        else:
            continue
    if is_prime:  # подводим итоги и заносим число в тот или иной список
        primes.append(i)
    else:
        not_primes.append(i)

print("Primes: ", primes)
print("Not Primes: ", not_primes)
